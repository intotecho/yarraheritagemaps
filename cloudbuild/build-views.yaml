steps:

# 1A REMOVE TABLE  _HERITAGE_PROPS_TABLE
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bq'
  args: 
  - 'rm'
  - '-f'
  - '-t'
  - '--project_id=${_PROJECT_ID}'
  - '${_TARGET_DATASET}.${_HERITAGE_PROPS_TABLE}'

# 1B CREATE TABLE: ${_HERITAGE_PROPS_TABLE}
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bq'
  args: 
  - 'query'
  - '--use_legacy_sql=false'
  - '--project_id=${_PROJECT_ID}'
  - '--destination_table=${_TARGET_DATASET}.${_HERITAGE_PROPS_TABLE}'
  - '--replace=true'
  - >- # folded block scalar; newlines are folded into spaces
    # TABLE - ${_HERITAGE_PROPS_TABLE} - BUILT WITH CLOUD BUILD
    WITH propnumboundaries AS (
      WITH pfiboundaries AS (
        WITH deduplicatedvhd AS (

          WITH mergedRegister AS (
            WITH vhdDeduplicated AS ( # remove duplicate rows in VHD
            SELECT k.*
              FROM (
                SELECT ARRAY_AGG(x LIMIT 1)[OFFSET(0)] k 
                FROM `yarrascrape.YarraPlanning.VHD` x 
                GROUP BY vhdPlaceId
              )
            )
            SELECT
              register.EZI_ADD,
              register.HeritageStatus,
              register.Overlay,
              vhd.Name,
              vhd.vhdplaceid,
              register.vhdplaceid AS vhdPlacesId,
              vhd.Image,
              vhd.Authority,
              register.PropertyType,
              register.EstimatedDate,
              register.NormalAddress,
              register.OriginalAddress,
              vhd.Location AS vhdLocation,
              register.Matched,
              REGEXP_EXTRACT(PropertyId, r"[\d]*") as PROPNUM,
              REGEXP_REPLACE(register.PROPERTY_PFI, r"\'", "") AS PROPERTY_PFI,
              vhd.VHR,
              vhd.href,
              vhd.SoSHash,
              register.earliest,
              register.latest,
              register.sec_earliest,
              register.sec_latest,
              SAFE.ST_GeogFromGeoJSON(register.geom) as eziAddressPoint,
              SAFE.ST_GEOGPOINT(vhd.VHRlng,vhd.VHRlat) as vhdPoint
            FROM
              `yarrascrape.YarraPlanning.${_HERITAGE_REGISTER}` AS register
            LEFT OUTER JOIN
              vhdDeduplicated AS vhd
            ON
              REGEXP_EXTRACT(register.vhdplaceid, r"\[(\d{3,12}).*\]") = CAST(vhd.vhdplaceid AS STRING)
          )
          SELECT k.* # remove duplicate rows in result
              FROM (
                SELECT ARRAY_AGG(x LIMIT 1)[OFFSET(0)] k 
                FROM mergedRegister x 
                GROUP BY vhdPlaceId
              )
        )
        SELECT # Convert PROPERTY_PFI string array into separate rows.
          deduplicatedvhd.*,
          ARRAY( 
            SELECT DISTINCT geom 
            FROM UNNEST(
              SPLIT(
                SUBSTR(PROPERTY_PFI, 2 , LENGTH(PROPERTY_PFI) - 2)
              )
            ) AS pfi
            JOIN `yarrascrape.YarraPlanning.YARRA_PROPERTIES` as props1
            ON CAST(pfi AS INT64) = props1.PROP_PFI
            AND geom is not null and 
            (vhdPlaceId is not null and ST_CONTAINS(SAFE.ST_GeogFromGeoJSON(geom), deduplicatedvhd.vhdPoint) or 
            (vhdPlaceId is null and ST_CONTAINS(SAFE.ST_GeogFromGeoJSON(geom), deduplicatedvhd.eziAddressPoint)))
          ) AS pfibndry_arr 
        FROM deduplicatedvhd
      )
      SELECT 
        pfiboundaries.*,
        ST_ASTEXT(SAFE.ST_GeogFromGeoJSON(pfibndry_arr[SAFE_OFFSET(0)])) as pfibndry,
        ST_ASTEXT(SAFE.ST_GeogFromGeoJSON(props2.geom)) as propnumbndry
        FROM pfiboundaries
        LEFT OUTER JOIN `yarrascrape.YarraPlanning.YARRA_PROPERTIES` as props2
        ON  pfiboundaries.PROPNUM = props2.PROPNUM
        AND ST_CONTAINS(SAFE.ST_GeogFromGeoJSON(props2.geom), pfiboundaries.vhdPoint) 
      )
      SELECT 
        propnumboundaries.* EXCEPT(pfibndry_arr,propnumbndry, pfibndry, vhdPoint, eziAddressPoint, property_pfi),
        COALESCE(propnumbndry, pfibndry, ST_ASTEXT(vhdPoint)) as bndry
        FROM propnumboundaries

# 1C UPDATE TABLE: ${_HERITAGE_PROPS_TABLE}
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bq'
  args: 
  - 'update'
  - '--set_label=build:build-views-yaml'
  - '--set_label=heritage-maps:required'
  - '--expiration=0'
  - '--description=${_HERITAGE_PROPS_TABLE_DESCR}'
  - '${_TARGET_DATASET}.${_HERITAGE_PROPS_TABLE}'


# 2A REMOVE VIEW: _OVERLAYS_AVG_DATE
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bq'
  args: 
  - 'rm'
  - '-f'
  - '-t'
  - '--project_id=${_PROJECT_ID}'
  - '${_TARGET_DATASET}.${_OVERLAYS_AVG_DATE}'

# 2B CREATE VIEW  _OVERLAYS_AVG_DATE
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bq'
  args: 
  - 'mk'
  - '--use_legacy_sql=false'
  - '--project_id=${_PROJECT_ID}'
  - '--expiration=0'
  - '--label=build:build-views-yaml'
  - '--label=heritage-maps:required'
  - |
    --description=
    QUERY FOR VIEW: ${_OVERLAYS_AVG_DATE} - BUILT WITH CLOUD BUILD.
    Extract Details of the dates of all properties in each overlay
    Based on tables
      YARRAHERITAGEMAPS_PROPERTIES
      OVERLAY_SCHEDULE
      VHR_DETAILS - for images.
  - >- # folded block scalar; newlines are folded into spaces
    --view=
    # QUERY FOR VIEW: ${_OVERLAYS_AVG_DATE} - BUILT WITH CLOUD BUILD
    SELECT
      Distinct(Overlay),
      CAST(FLOOR(AVG(earliest)) AS INT64)  as Avg_EstablishedDate,
      CAST(FLOOR(MIN(earliest)) AS INT64)  as Min_EstablishedDate,
      CAST(FLOOR(MAX(earliest)) AS INT64)  as Max_EstablishedDate
    FROM
      `${_PROJECT_ID}.${_SRC_DATASET}.${_HERITAGE_REGISTER}` AS register
    WHERE
      earliest > 1800
    GROUP BY
      Overlay
  - '${_TARGET_DATASET}.${_OVERLAYS_AVG_DATE}'

# 2C UPDATE VIEW TO NOT EXPIRE: ${_OVERLAYS_AVG_DATE} 
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bq'
  args: 
  - 'update'
  - '--set_label=build:build-views-yaml'
  - '--set_label=heritage-maps:required'
  - '--expiration=0'
  - '${_TARGET_DATASET}.${_OVERLAYS_AVG_DATE}'

# 3A Remove ${_OVERLAYS_VIEW}
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bq'
  args: 
  - 'rm'
  - '-f'
  - '-t'
  - '--project_id=${_PROJECT_ID}'
  - '${_TARGET_DATASET}.${_OVERLAYS_VIEW}'

# 3B Create View ${_OVERLAYS_VIEW} from QUERY
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bq'
  args: 
  - 'mk'
  - '--use_legacy_sql=false'
  - '--project_id=${_PROJECT_ID}'
  - '--expiration=0'
  - '--label=build:build-views-yaml'
  - '--label=heritage-maps:required'
  - |
    --description=
    QUERY FOR VIEW ${_OVERLAYS_VIEW} BUILT WITH CLOUD BUILD
    Merge the Boundary Geometry from YARRA_OVERLAYS with the OVERLAY_SCHEDULE and OVERLAY_AVG_DATE
    Filter out not Yarra LGA overlays and no HO zone types
    Merge in the Average, Min and Max Established dates for each overlay.
    Finally filters out overlays more than _RANGE_FROM_HO330 meters from HO300 (given by a point, could be a param)
    Based on tables
      OVERLAY_SCHEDULE  from ${_SRC_DATASET}
      YARRA_OVERLAYS  from ${_SRC_DATASET}
      ${_OVERLAYS_AVG_DATE} VIEW from ${_TARGET_DATASET}
  - >- 
    --view=
    # QUERY FOR VIEW: ${_OVERLAYS_VIEW} - BUILT WITH CLOUD BUILD
    WITH
      AllOverlays AS (
    WITH
      schedulewithboundary AS (
         WITH overlayDeduplicated AS ( # remove duplicate rows
         SELECT k.*
         FROM (
          SELECT ARRAY_AGG(x LIMIT 1)[OFFSET(0)] k 
          FROM  `${_PROJECT_ID}.${_SRC_DATASET}.YARRA_OVERLAYS`  x 
          GROUP BY ZONE_CODE
         )
      )
      SELECT
        * EXCEPT(
          SCHEMECODE,
          geom,
          LGA_CODE,
          ZONESTATUS,
          PFI,
          ZONE_NUM,
          PFI_CR,
          UFI_CR,
          UFI),
        SAFE.ST_GeogFromGeoJson(geom) AS OverlayBoundary
        FROM
          overlayDeduplicated AS zones
        LEFT OUTER JOIN
          `${_PROJECT_ID}.${_SRC_DATASET}.OVERLAY_SCHEDULE` AS schedule
      ON
        zones.ZONE_CODE= schedule.Overlay
      WHERE
        LGA='YARRA'
        AND SCHEMECODE='HO' )
    SELECT
      ZONE_CODE as Overlay,
      schedulewithboundary.* EXCEPT(Overlay, ZONE_CODE),
      vhrd.Image,
      dates.* EXCEPT(Overlay)
    FROM
      schedulewithboundary
    LEFT OUTER JOIN
      `${_PROJECT_ID}.${_TARGET_DATASET}.${_OVERLAYS_AVG_DATE}` AS dates
    ON
      schedulewithboundary.ZONE_CODE = dates.Overlay
    LEFT OUTER JOIN
      `yarrascrape.YarraPlanning.VHD_DETAILS` AS vhrd
    ON
      CAST(SUBSTR(vhrd.VHR, 2) AS INT64) = CAST(SUBSTR( schedulewithboundary.VHR, 2) AS INT64)
    )
    SELECT *
    FROM AllOverlays
    WHERE ST_Distance(ST_GeogPoint(144.994705262,-37.785239409),
    OverlayBoundary) < ${_RANGE_FROM_HO330}
  - '${_TARGET_DATASET}.${_OVERLAYS_VIEW}'

# 3C UPDATE VIEW TO NOT EXPIRE: ${_OVERLAYS_VIEW} 
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bq'
  args: 
  - 'update'
  - '--set_label=build:build-views-yaml'
  - '--set_label=heritage-maps:required'
  - '--expiration=0'
  - '${_TARGET_DATASET}.${_OVERLAYS_VIEW}'

substitutions:
  # PROJECT PARAMS
  _PROJECT_ID: yarrascrape
  _SRC_DATASET: YarraPlanning
  _TARGET_DATASET: PROD_DATASET
  _RANGE_FROM_HO330: 1200

  # INPUTS TABLES
  _HERITAGE_REGISTER: HERITAGE_REGISTER_C191_WITHVHD
  _YARRA_PROPS: YARRA_PROPERTIES 
  _YARRA_OVERLAYS: YARRA_OVERLAYS
  
  # OUTPUTS
  _OVERLAYS_AVG_DATE: OVERLAYS_AVG_ESTABLISHED_DATE
  _OVERLAYS_VIEW: OVERLAYS
  _HERITAGE_PROPS_TABLE: YARRAHERITAGEMAPS_PROPERTIES
  
  # DECSCRIPTIONS
  _HERITAGE_PROPS_TABLE_DESCR:  |
    TABLE - ${_HERITAGE_PROPS_TABLE} - BUILT WITH CLOUD BUILD
    cloudbuild/build-views.yaml. 
    JOINS TABLES 
      - ${_HERITAGE_REGISTER} from ${_SRC_DATASET}
      - YARRA_PROPERTIES from ${_SRC_DATASET}
      - VHD from VHD
    ${_HERITAGE_REGISTER} has been matched to PFIs and vhdplacesId. 
    The query to create this table merges data from VHD properties and de-duplicates.
    It then merges boundary geometry from YARRA_PROPERTIES checking each of the PROPERTY_PFI rows for a geometry that contains the VHDLocation.
    It then merges boundary geometry from YARRA_PROPERTIES matching  PROPNUM if its geometry contains the VHDLocation.
    If no boundary is found, then the vhdPoint is set as the bndry.
    USES TABLES 
      - ${_HERITAGE_REGISTER} from ${_SRC_DATASET}
      - YARRA_PROPERTIES from ${_SRC_DATASET}
      - VHD from VHD table.
