steps:

# 1a REMOVE VIEW  _HERITAGE_PROPS_VIEW
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bq'
  args: 
  - 'rm'
  - '-f'
  - '-t'
  - '--project_id=${_PROJECT_ID}'
  - '${_TARGET_DATASET}.${_HERITAGE_PROPS_VIEW}'

# 2a CREATE VIEW: ${_HERITAGE_PROPS_VIEW}
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bq'
  args: 
  - 'mk'
  - '--use_legacy_sql=false'
  - '--project_id=${_PROJECT_ID}'
  - '--expiration=0'
  - '--label=build:coudbuild-yaml'
  - '--label=heritage-maps:required'
  - |
    --description=
    QUERY FOR VIEW ${_HERITAGE_PROPS_VIEW} BUILT WITH CLOUD BUILD
    Enrich HERITAGE_REGISTER with VHD peroperties
    and perform preprocessing to suit the join with YARRA_PROPERTIES.
    Extracts the first three PROP_PFIs for matching.
    USES TABLES 
      - ${_HERITAGE_REGISTER} from ${_SRC_DATASET}
      - YARRA_PROPERTIES from ${_SRC_DATASET}
  - |
    --view=
    #  QUERY FOR VIEW: ${_HERITAGE_PROPS_VIEW} - BUILT WITH CLOUD BUILD
    SELECT
      register.EZI_ADD,
      register.HeritageStatus,
      register.Overlay,
      vhd.Name,
      vhd.vhdplaceid,
      register.vhdplaceid AS vhdPlacesId,
      vhd.Image,
      vhd.Authority,
      register.PropertyType,
      register.EstimatedDate,
      register.NormalAddress,
      register.OriginalAddress,
      vhd.Location AS vhdLocation,
      register.Matched,
      vhd.VHR,
      vhd.href,
      vhd.SoSHash,
      register.earliest,
      register.latest,
      register.sec_earliest,
      register.sec_latest,
      register.PropertyId,                                             
      REGEXP_EXTRACT(PropertyId, r"[\d]*") as PROPNUM,
      register.PROPERTY_PFI,
      CAST(REGEXP_EXTRACT(register.PROPERTY_PFI, r'\[\'(\d{3,12})\'.*\]') AS INT64) as prop_pfi1,
      CAST(REGEXP_EXTRACT(register.PROPERTY_PFI, r'\[\'\d*\', \'(\d{3,12})\'.*\]') AS INT64) as prop_pfi2,
      CAST(REGEXP_EXTRACT(register.PROPERTY_PFI, r'\[\'\d*\', \'\d*\', \'(\d{3,12})\'.*\]') AS INT64) as prop_pfi3,       
      register.geom, # ezi_address location might not be used.
      SAFE.ST_GEOGPOINT(vhd.VHRlng,vhd.VHRlat) as vhdGeom
    FROM
      `yarrascrape.${_SRC_DATASET}.${_HERITAGE_REGISTER}` AS register
    LEFT JOIN
      `yarrascrape.${_SRC_DATASET}.VHD` AS vhd
    ON
      REGEXP_EXTRACT(register.vhdplaceid, r'\[(\d{3,12}).*\]') = CAST(vhd.vhdplaceid AS STRING)
  - '${_TARGET_DATASET}.${_HERITAGE_PROPS_VIEW}'


# 3 REMOVE VIEW: _OVERLAYS_AVG_DATE
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bq'
  args: 
  - 'rm'
  - '-f'
  - '-t'
  - '--project_id=${_PROJECT_ID}'
  - '${_TARGET_DATASET}.${_OVERLAYS_AVG_DATE}'

# 4 CREATE VIEW  _OVERLAYS_AVG_DATE
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bq'
  args: 
  - 'mk'
  - '--use_legacy_sql=false'
  - '--project_id=${_PROJECT_ID}'
  - '--expiration=0'
  - '--label=build:coudbuild-yaml'
  - '--label=heritage-maps:required'
  - |
    --description=
    QUERY FOR VIEW: ${_OVERLAYS_AVG_DATE} - BUILT WITH CLOUD BUILD.
    Extract Details of the dates of all properties in each overlay
    Based on tables
      YARRAHERITAGEMAPS_PROPERTIES
      OVERLAY_SCHEDULE
  - |
    --view=
    # QUERY FOR VIEW: ${_OVERLAYS_AVG_DATE} - BUILT WITH CLOUD BUILD
    SELECT
      Overlay,
      CAST(FLOOR(AVG(earliest)) AS INT64)  as Avg_EstablishedDate,
      CAST(FLOOR(MIN(earliest)) AS INT64)  as Min_EstablishedDate,
      CAST(FLOOR(MAX(earliest)) AS INT64)  as Max_EstablishedDate
    FROM
      `${_PROJECT_ID}.${_SRC_DATASET}.${_HERITAGE_REGISTER}` AS register
    WHERE
      earliest > 1800
    GROUP BY
      Overlay
  - '${_TARGET_DATASET}.${_OVERLAYS_AVG_DATE}'

# 5 Remove ${_OVERLAYS_VIEW}
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bq'
  args: 
  - 'rm'
  - '-f'
  - '-t'
  - '--project_id=${_PROJECT_ID}'
  - '${_TARGET_DATASET}.${_OVERLAYS_VIEW}'

# 6 Create View ${_OVERLAYS_VIEW} from QUERY
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bq'
  args: 
  - 'mk'
  - '--use_legacy_sql=false'
  - '--project_id=${_PROJECT_ID}'
  - '--expiration=0'
  - '--label=build:coudbuild-yaml'
  - '--label=heritage-maps:required'
  - |
    --description=
    QUERY FOR VIEW ${_OVERLAYS_VIEW} BUILT WITH CLOUD BUILD
    Merge the Boundary Geometry from YARRA_OVERLAYS with the OVERLAY_SCHEDULE and OVERLAY_AVG_DATE
    Filter out not Yarra LGA overlays and no HO zone types
    Merge in the Average, Min and Max Established dates for each overlay.
    Based on tables
      OVERLAY_SCHEDULE  from ${_SRC_DATASET}
      YARRA_OVERLAYS  from ${_SRC_DATASET}
      ${_OVERLAYS_AVG_DATE} VIEW from ${_TARGET_DATASET}
  - |
    --view=
    # QUERY FOR VIEW: ${_OVERLAYS_VIEW} - BUILT WITH CLOUD BUILD
    WITH
      schedulewithboundary AS (
      SELECT
        * EXCEPT(geom,
          LGA_CODE,
          ZONESTATUS,
          PFI,
          ZONE_NUM,
          PFI_CR,
          UFI_CR,
          UFI),
        SAFE.ST_GeogFromGeoJson(geom) AS OverlayBoundary
        FROM
          `${_PROJECT_ID}.${_SRC_DATASET}.YARRA_OVERLAYS` AS zones
        LEFT JOIN
          `${_PROJECT_ID}.${_SRC_DATASET}.OVERLAY_SCHEDULE` AS schedule
      ON
        zones.ZONE_CODE= schedule.Overlay
      WHERE
        LGA='YARRA'
        AND SCHEMECODE='HO' )
    SELECT
      schedulewithboundary.*,
      dates.* EXCEPT(Overlay)
    FROM
      schedulewithboundary
    LEFT JOIN
      `${_PROJECT_ID}.${_TARGET_DATASET}.${_OVERLAYS_AVG_DATE}` AS dates
    ON
      schedulewithboundary.ZONE_CODE = dates.Overlay
  - '${_TARGET_DATASET}.${_OVERLAYS_VIEW}'

# 7 Remove View _YARRAHERITAGEMAPS_PROPERTIES
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bq'
  args: 
  - 'rm'
  - '-f'
  - '-t'
  - '--project_id=${_PROJECT_ID}'
  - '${_TARGET_DATASET}.${_YARRAHERITAGEMAPS_PROPERTIES}'

# 8 Create View _YARRAHERITAGEMAPS_PROPERTIES from QUERY
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bq'
  args: 
  - 'mk'
  - '--use_legacy_sql=false'
  - '--project_id=${_PROJECT_ID}'
  - '--expiration=0'
  - '--label=build:coudbuild-yaml'
  - '--label=heritage-maps:required'
  - |
    --description=
    QUERY FOR VIEW ${_YARRAHERITAGEMAPS_PROPERTIES} BUILT WITH CLOUD BUILD
    Merge all the VHD Properties with  ${_HERITAGE_PROPS_VIEW} 
    Select props needed for application to run.
    Convert to ST_GeoJson
    Based on views 
      ${_HERITAGE_PROPS_VIEW} view from ${_TARGET_DATASET}
      ${_OVERLAYS_AVG_DATE} view from ${_TARGET_DATASET}
      VHD table from  ${_SRC_DATASET}
  - |
    --view=
    # QUERY FOR VIEW ${_YARRAHERITAGEMAPS_PROPERTIES} BUILT WITH CLOUD BUILD
    SELECT 
    r.*,
    properties.LGA_CODE,
    properties.PROP_PFI as matchingPROP_PFI,
    properties.PROPNUM as matchingPROPNUM,
    SAFE.ST_GeogFromGeoJSON(properties.geom) AS bndry
    FROM
      `${_PROJECT_ID}.${_TARGET_DATASET}.${_HERITAGE_PROPS_VIEW}` AS r
    JOIN `${_PROJECT_ID}.${_TARGET_DATASET}.YARRA_PROPERTIES` AS properties
    ON ( 
      r.PROPNUM = properties.PROPNUM
      OR 
      r.prop_pfi1 = properties.PROP_PFI
      OR
      r.prop_pfi2 = properties.PROP_PFI
      OR
      r.prop_pfi3 = properties.PROP_PFI
    )
    WHERE ST_CONTAINS(SAFE.ST_GeogFromGeoJSON(properties.geom), r.vhdGeom) = TRUE
  - '${_TARGET_DATASET}.${_YARRAHERITAGEMAPS_PROPERTIES}'

substitutions:
  _PROJECT_ID: yarrascrape
  _SRC_DATASET: YarraPlanning
  _TARGET_DATASET: PROD_DATASET
  _HERITAGE_PROPS_VIEW: HERITAGE_OVERLAY_VHD_GEOM
  _OVERLAYS_AVG_DATE: OVERLAYS_AVG_ESTABLISHED_DATE
  _OVERLAYS_VIEW: OVERLAYS
  _YARRAHERITAGEMAPS_PROPERTIES: YARRAHERITAGEMAPS_PROPERTIES
  _HERITAGE_REGISTER: HERITAGE_REGISTER_C191_WITHVHD